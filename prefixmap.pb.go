// Code generated by protoc-gen-go. DO NOT EDIT.
// source: prefixmap.proto

package phonenumbers

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Value struct {
	Data map[string]string `protobuf:"bytes,1,rep,name=data" json:"data,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *Value) Reset()                    { *m = Value{} }
func (m *Value) String() string            { return proto.CompactTextString(m) }
func (*Value) ProtoMessage()               {}
func (*Value) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

func (m *Value) GetData() map[string]string {
	if m != nil {
		return m.Data
	}
	return nil
}

type PrefixMap struct {
	MaxPrefixLength uint32            `protobuf:"varint,1,opt,name=max_prefix_length,json=maxPrefixLength" json:"max_prefix_length,omitempty"`
	Values          map[uint32]*Value `protobuf:"bytes,2,rep,name=values" json:"values,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *PrefixMap) Reset()                    { *m = PrefixMap{} }
func (m *PrefixMap) String() string            { return proto.CompactTextString(m) }
func (*PrefixMap) ProtoMessage()               {}
func (*PrefixMap) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

func (m *PrefixMap) GetMaxPrefixLength() uint32 {
	if m != nil {
		return m.MaxPrefixLength
	}
	return 0
}

func (m *PrefixMap) GetValues() map[uint32]*Value {
	if m != nil {
		return m.Values
	}
	return nil
}

func init() {
	proto.RegisterType((*Value)(nil), "i18n.phonenumbers.Value")
	proto.RegisterType((*PrefixMap)(nil), "i18n.phonenumbers.PrefixMap")
}

func init() { proto.RegisterFile("prefixmap.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 237 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2f, 0x28, 0x4a, 0x4d,
	0xcb, 0xac, 0xc8, 0x4d, 0x2c, 0xd0, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x12, 0xcc, 0x34, 0xb4,
	0xc8, 0xd3, 0x2b, 0xc8, 0xc8, 0xcf, 0x4b, 0xcd, 0x2b, 0xcd, 0x4d, 0x4a, 0x2d, 0x2a, 0x56, 0xaa,
	0xe0, 0x62, 0x0d, 0x4b, 0xcc, 0x29, 0x4d, 0x15, 0x32, 0xe3, 0x62, 0x49, 0x49, 0x2c, 0x49, 0x94,
	0x60, 0x54, 0x60, 0xd6, 0xe0, 0x36, 0x52, 0xd2, 0xc3, 0x50, 0xaa, 0x07, 0x56, 0xa7, 0xe7, 0x92,
	0x58, 0x92, 0xe8, 0x9a, 0x57, 0x52, 0x54, 0x19, 0x04, 0x56, 0x2f, 0x65, 0xce, 0xc5, 0x09, 0x17,
	0x12, 0x12, 0xe0, 0x62, 0xce, 0x4e, 0xad, 0x94, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x0c, 0x02, 0x31,
	0x85, 0x44, 0xb8, 0x58, 0xcb, 0x40, 0xfa, 0x24, 0x98, 0xc0, 0x62, 0x10, 0x8e, 0x15, 0x93, 0x05,
	0xa3, 0xd2, 0x39, 0x46, 0x2e, 0xce, 0x00, 0xb0, 0x03, 0x7d, 0x13, 0x0b, 0x84, 0xb4, 0xb8, 0x04,
	0x73, 0x13, 0x2b, 0xe2, 0x21, 0x2e, 0x8e, 0xcf, 0x49, 0xcd, 0x4b, 0x2f, 0xc9, 0x00, 0x9b, 0xc3,
	0x1b, 0xc4, 0x9f, 0x9b, 0x58, 0x01, 0x51, 0xe8, 0x03, 0x16, 0x16, 0x72, 0xe0, 0x62, 0x03, 0x1b,
	0x53, 0x2c, 0xc1, 0x04, 0x76, 0xac, 0x06, 0x16, 0xc7, 0xc2, 0x4d, 0x86, 0x38, 0xbb, 0x18, 0xe2,
	0x64, 0xa8, 0x3e, 0xa9, 0x60, 0x2e, 0x6e, 0x24, 0x61, 0x64, 0x67, 0xf3, 0x42, 0x9c, 0xad, 0x87,
	0xec, 0x6c, 0x6e, 0x23, 0x09, 0x5c, 0xc1, 0x81, 0xe4, 0xa1, 0x24, 0x36, 0x70, 0x20, 0x1b, 0x03,
	0x02, 0x00, 0x00, 0xff, 0xff, 0xdd, 0xe2, 0x8d, 0x58, 0x77, 0x01, 0x00, 0x00,
}
